#!/usr/bin/env python3
"""
–û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è dashonoutrog_login
"""

import os
import requests
import json
import random
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def send_template_message(phone_number_id, to_number, verification_code):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ dashonoutrog_login —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    access_token = os.getenv('ACCESS_TOKEN')
    
    if not access_token:
        print("‚ùå ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    url = f"https://graph.facebook.com/v23.0/{phone_number_id}/messages"
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞
    data = {
        "messaging_product": "whatsapp",
        "to": to_number,
        "type": "template",
        "template": {
            "name": "dashonoutrog_login",
            "language": {
                "code": "en"  # –Ø–∑—ã–∫ —à–∞–±–ª–æ–Ω–∞
            },
            "components": [
                {
                    "type": "body",
                    "parameters": [
                        {
                            "type": "text",
                            "text": verification_code
                        }
                    ]
                },
                {
                    "type": "button",
                    "sub_type": "url",
                    "index": "0",
                    "parameters": [
                        {
                            "type": "text",
                            "text": verification_code
                        }
                    ]
                }
            ]
        }
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    print(f"URL: {url}")
    print(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {to_number}")
    print(f"–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_code}")
    print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
    
    try:
        response = requests.post(url, headers=headers, json=data)
        
        print(f"\n–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            message_id = result.get('messages', [{}])[0].get('id')
            contact_wa_id = result.get('contacts', [{}])[0].get('wa_id')
            
            print("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            print(f"Message ID: {message_id}")
            print(f"WhatsApp ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {contact_wa_id}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–∞–±–ª–æ–Ω–∞: {response.status_code}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
            try:
                error_data = response.json()
                error_message = error_data.get('error', {}).get('message', 'Unknown error')
                error_details = error_data.get('error', {}).get('error_data', {}).get('details', 'No details')
                print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_message}")
                print(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {error_details}")
            except:
                pass
            
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def get_phone_numbers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
    access_token = os.getenv('ACCESS_TOKEN')
    waba_id = os.getenv('WHATSAPP_BUSINESS_ACCOUNT_ID')
    
    url = f"https://graph.facebook.com/v23.0/{waba_id}/phone_numbers"
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            return data.get('data', [])
        return []
    except:
        return []

def main():
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ dashonoutrog_login")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    phone_numbers = get_phone_numbers()
    if not phone_numbers:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    phone_number_id = None
    for phone in phone_numbers:
        if phone.get('platform_type') == 'CLOUD_API':
            phone_number_id = phone['id']
            sender_number = phone['display_phone_number']
            print(f"üìû –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_number} (ID: {phone_number_id})")
            break
    
    if not phone_number_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è Cloud API")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    recipient_number = "48575019924"  # –ù–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    verification_code = str(random.randint(100000, 999999))  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    
    print(f"üì® –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_number}")
    print(f"üîê –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_code}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
    success = send_template_message(phone_number_id, recipient_number, verification_code)
    
    if success:
        print("\n‚úÖ –®–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ:")
        print("‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: dashonoutrog_login")
        print("‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: AUTHENTICATION")
        print("‚Ä¢ –Ø–∑—ã–∫: en")
        print("‚Ä¢ –¢–µ–∫—Å—Ç: *{–∫–æ–¥}* is your verification code. For your security, do not share this code.")
        print("‚Ä¢ –ö–Ω–æ–ø–∫–∞: Copy code (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–æ–π –∫–æ–¥–∞)")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω")

if __name__ == "__main__":
    main()
