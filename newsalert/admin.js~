const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();
const port = 3656;
const keywordsFilePath = path.join(__dirname, '.env_keys');

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API endpoint to get keywords
app.get('/api/keywords', (req, res) => {
  fs.readFile(keywordsFilePath, 'utf8', (err, data) => {
    if (err) {
      console.error('Error reading keywords file:', err);
      return res.status(500).send('Error reading keywords');
    }
    const keywords = data.split(/\r?\n/).map(line => line.trim()).filter(Boolean); // Split by newline, trim whitespace, and remove empty lines
    res.json(keywords);
  });
});

// API endpoint to add a keyword
app.post('/api/keywords', (req, res) => {
  const { keyword } = req.body;
  if (!keyword) {
    return res.status(400).send('Keyword is required');
  }
  fs.appendFile(keywordsFilePath, `\\n${keyword}`, (err) => {
    if (err) {
      console.error('Error adding keyword:', err);
      return res.status(500).send('Error adding keyword');
    }
    res.status(201).send('Keyword added');
  });
});

// API endpoint to delete a keyword
app.delete('/api/keywords/:keyword', (req, res) => {
  const keywordToDelete = req.params.keyword;
  fs.readFile(keywordsFilePath, 'utf8', (err, data) => {
    if (err) {
      console.error('Error reading keywords file:', err);
      return res.status(500).send('Error reading keywords');
    }
    const keywords = data.split('\\n').filter(Boolean);
    const newKeywords = keywords.filter(k => k !== keywordToDelete);
    const newData = newKeywords.join('\\n');
    fs.writeFile(keywordsFilePath, newData, 'utf8', (err) => {
      if (err) {
        console.error('Error deleting keyword:', err);
        return res.status(500).send('Error deleting keyword');
      }
      res.send('Keyword deleted');
    });
  });
});


app.listen(port, () => {
  console.log(`Admin panel listening at http://localhost:${port}`);
});
