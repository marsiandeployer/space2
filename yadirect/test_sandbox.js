const axios = require('axios');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç');
console.log('========================================');


// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const sandboxOAuthToken = process.env.YANDEX_SANDBOX_OAUTH_TOKEN;

if (!sandboxOAuthToken) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç YANDEX_SANDBOX_OAUTH_TOKEN –≤ .env');
  console.error('   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ, –∑–∞–ø—É—Å—Ç–∏–≤ `node get_sandbox_oauth_token.js` –∏ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.');
  process.exit(1);
}

console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã:');
console.log(`   Sandbox OAuth Token: ${sandboxOAuthToken.substring(0, 8)}...`); // Mask token for display
console.log('');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã
async function testSandbox() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç
    const directResponse = await axios.post('https://api-sandbox.direct.yandex.com/json/v5/campaigns', {
      method: 'get',
      params: {
        SelectionCriteria: {},
        FieldNames: ['Id', 'Name', 'Status', 'StatusPayment', 'StatusClarification']
      }
    }, {
      headers: {
        'Authorization': `Bearer ${sandboxOAuthToken}`,
        'Content-Type': 'application/json; charset=utf-8',
        'Accept-Language': 'ru'
      }
    });
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ!');
    
    if (directResponse.data.result && directResponse.data.result.Campaigns) {
      const campaigns = directResponse.data.result.Campaigns;
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ: ${campaigns.length}`);
      
      if (campaigns.length > 0) {
        console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏:');
        campaigns.forEach((campaign, index) => {
          console.log(`   ${index + 1}. ID: ${campaign.Id}, –ù–∞–∑–≤–∞–Ω–∏–µ: "${campaign.Name}", –°—Ç–∞—Ç—É—Å: ${campaign.Status}`);
        });
      } else {
        console.log('üìù –í –ø–µ—Å–æ—á–Ω–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π');
        console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã');
      }
    } else {
      console.log('‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Å–æ—á–Ω–∏—Ü—ã:');
      console.log(JSON.stringify(directResponse.data, null, 2));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π:');
    if (error.response) {
      console.error(`   HTTP ${error.response.status}: ${error.response.statusText}`);
      console.error(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(error.response.data, null, 2)}`);
    } else {
      console.error(`   ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSandbox();
