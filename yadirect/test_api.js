#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç API
 */

require('dotenv').config();
const YandexDirectService = require('./src/services/yandexDirectService');
const logger = require('./src/utils/logger');

async function testYandexDirectAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç API...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.YANDEX_CLIENT_ID || !process.env.YANDEX_CLIENT_SECRET) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ OAuth –≤ .env —Ñ–∞–π–ª–µ');
    return;
  }

  console.log('‚úÖ OAuth –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã:');
  console.log(`   Client ID: ${process.env.YANDEX_CLIENT_ID}`);
  console.log(`   Client Secret: ${process.env.YANDEX_CLIENT_SECRET.substring(0, 8)}...`);
  console.log(`   Redirect URI: ${process.env.YANDEX_REDIRECT_URI}\n`);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const token = process.argv[2];
  if (!token) {
    console.log('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç:');
    console.log('   node test_api.js YOUR_ACCESS_TOKEN\n');
    
    console.log('üìù –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞: http://localhost:3000/auth/yandex/url');
    console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n');
    return;
  }

  try {
    const yandexService = new YandexDirectService(token);
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...');
    try {
      await yandexService.validateToken();
      console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!\n');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error.message);
      return;
    }

    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π...');
    try {
      const campaigns = await yandexService.getCampaigns();
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: ${campaigns.Campaigns?.length || 0}`);
      
      if (campaigns.Campaigns && campaigns.Campaigns.length > 0) {
        console.log('\nüìä –ü–µ—Ä–≤—ã–µ 3 –∫–∞–º–ø–∞–Ω–∏–∏:');
        campaigns.Campaigns.slice(0, 3).forEach((campaign, index) => {
          console.log(`   ${index + 1}. ID: ${campaign.Id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${campaign.Name}, –°—Ç–∞—Ç—É—Å: ${campaign.Status}`);
        });
      }
      console.log('');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π:', error.message);
    }

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é OpenAI
    if (process.env.OPENAI_API_KEY) {
      console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
      try {
        const OpenAIService = require('./src/services/openaiService');
        const openaiService = new OpenAIService();
        
        const testData = {
          url: 'https://habab.ru/brachnogo-dogovora',
          title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—á–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ–Ω–ª–∞–π–Ω',
          meta_description: '–ë—ã—Å—Ç—Ä–∞—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—á–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞',
          meta_keywords: ['–±—Ä–∞—á–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä', '–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞'],
          main_keyword: '–±—Ä–∞—á–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä'
        };

        const ads = await openaiService.generateAds(testData);
        console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${ads.length}`);
        
        if (ads.length > 0) {
          console.log('\nüìù –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:');
          console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${ads[0].title}`);
          console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${ads[0].description}`);
          console.log(`   URL: ${ads[0].url}`);
        }
        console.log('');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n');
    }

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(0);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testYandexDirectAPI().catch(error => {
  console.error('–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
