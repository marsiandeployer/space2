import os
import pyodbc
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from dotenv import load_dotenv
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from plotly.offline import plot
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DatabaseAdmin:
    def __init__(self):
        self.connection_string = self._build_connection_string()
        self.connection = None
        
    def _build_connection_string(self):
        """–°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö OperativeReport"""
        host = os.getenv('DB_HOST')
        port = os.getenv('DB_PORT')
        user = os.getenv('DB_USER')
        password = os.getenv('DB_PASSWORD')
        database = os.getenv('DB_NAME_OPERATIVE', 'OperativeReport')
        driver = os.getenv('DB_DRIVER', 'ODBC Driver 17 for SQL Server')
        
        return f"DRIVER={{{driver}}};SERVER={host},{port};DATABASE={database};UID={user};PWD={password};"
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = pyodbc.connect(self.connection_string)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö OperativeReport!")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection:
            self.connection.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    def execute_query(self, query, params=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if not self.connection:
                if not self.connect():
                    return None
            
            df = pd.read_sql(query, self.connection, params=params)
            return df
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def get_table_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º"""
        query = """
        SELECT 
            t.TABLE_NAME as '–¢–∞–±–ª–∏—Ü–∞',
            p.rows as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π',
            (p.reserved * 8) as '–†–∞–∑–º–µ—Ä (KB)',
            CAST((p.reserved * 8.0 / 1024) as DECIMAL(10,2)) as '–†–∞–∑–º–µ—Ä (MB)',
            c.column_count as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤'
        FROM INFORMATION_SCHEMA.TABLES t
        LEFT JOIN (
            SELECT 
                i.name,
                SUM(p.rows) as rows,
                SUM(a.total_pages) as reserved
            FROM sys.tables i
            INNER JOIN sys.partitions p ON i.object_id = p.object_id
            INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id
            GROUP BY i.name
        ) p ON t.TABLE_NAME = p.name
        LEFT JOIN (
            SELECT 
                TABLE_NAME,
                COUNT(*) as column_count
            FROM INFORMATION_SCHEMA.COLUMNS
            GROUP BY TABLE_NAME
        ) c ON t.TABLE_NAME = c.TABLE_NAME
        WHERE t.TABLE_TYPE = 'BASE TABLE'
        ORDER BY p.rows DESC
        """
        return self.execute_query(query)
    
    def get_table_details(self, table_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ"""
        query = f"""
        SELECT 
            COLUMN_NAME as '–°—Ç–æ–ª–±–µ—Ü',
            DATA_TYPE as '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö',
            CHARACTER_MAXIMUM_LENGTH as '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞',
            IS_NULLABLE as '–ú–æ–∂–µ—Ç –±—ã—Ç—å NULL',
            COLUMN_DEFAULT as '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_NAME = '{table_name}'
        ORDER BY ORDINAL_POSITION
        """
        return self.execute_query(query)
    
    def get_table_sample_data(self, table_name, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        query = f"SELECT TOP {limit} * FROM [{table_name}]"
        return self.execute_query(query)
    
    def get_date_range_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å –¥–∞—Ç–∞–º–∏"""
        tables_with_dates = {
            'EnterpriseWagons': '[–î–∞—Ç–∞]',
            'ShipmentsToThePort': '[–î–∞—Ç–∞]',
            'ContainerStorage': '[–î–∞—Ç–∞]',
            'PlanShipsIlsar': '[–î–∞—Ç–∞]',
            'ShipsImport': '[–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–¥—Ö–æ–¥–∞]',
            'SSP': '[–î–∞—Ç–∞]',
            'VagonImport': '[–î–∞—Ç–∞]',
            'WagonsOnTheWay': '[–î–∞—Ç–∞]',
            'WagonsPresence': '[–î–∞—Ç–∞]'
        }
        
        results = []
        for table, date_column in tables_with_dates.items():
            query = f"""
            SELECT 
                '{table}' as '–¢–∞–±–ª–∏—Ü–∞',
                MIN({date_column}) as '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞',
                MAX({date_column}) as '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞',
                DATEDIFF(day, MIN({date_column}), MAX({date_column})) as '–î–∏–∞–ø–∞–∑–æ–Ω (–¥–Ω–∏)',
                COUNT(*) as '–ó–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–∞–º–∏'
            FROM [{table}]
            WHERE {date_column} IS NOT NULL
            """
            df = self.execute_query(query)
            if df is not None and not df.empty:
                results.append(df)
        
        if results:
            return pd.concat(results, ignore_index=True)
        return pd.DataFrame()
    
    def get_cargo_statistics(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–¥–∞–º –≥—Ä—É–∑–∞"""
        query = """
        SELECT 
            'EnterpriseWagons' as '–¢–∞–±–ª–∏—Ü–∞',
            [–†–æ–¥ –≥—Ä—É–∑–∞],
            COUNT(*) as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π',
            SUM([–í–µ—Å –≥—Ä—É–∑–∞ –ø—Ä–∏–Ω—è—Ç—ã–π (—Ç)]) as '–û–±—â–∏–π –≤–µ—Å (—Ç)'
        FROM [EnterpriseWagons]
        WHERE [–†–æ–¥ –≥—Ä—É–∑–∞] IS NOT NULL
        GROUP BY [–†–æ–¥ –≥—Ä—É–∑–∞]
        
        UNION ALL
        
        SELECT 
            'ShipmentsToThePort' as '–¢–∞–±–ª–∏—Ü–∞',
            [–†–æ–¥ –≥—Ä—É–∑–∞],
            COUNT(*) as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π',
            SUM([–í–µ—Å –≥—Ä—É–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π(—Ç)]) as '–û–±—â–∏–π –≤–µ—Å (—Ç)'
        FROM [ShipmentsToThePort]
        WHERE [–†–æ–¥ –≥—Ä—É–∑–∞] IS NOT NULL
        GROUP BY [–†–æ–¥ –≥—Ä—É–∑–∞]
        
        UNION ALL
        
        SELECT 
            'VagonImport' as '–¢–∞–±–ª–∏—Ü–∞',
            [–†–æ–¥ –≥—Ä—É–∑–∞],
            COUNT(*) as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π',
            SUM([–í–µ—Å –Ω–µ—Ç—Ç–æ (—Ç)]) as '–û–±—â–∏–π –≤–µ—Å (—Ç)'
        FROM [VagonImport]
        WHERE [–†–æ–¥ –≥—Ä—É–∑–∞] IS NOT NULL
        GROUP BY [–†–æ–¥ –≥—Ä—É–∑–∞]
        
        ORDER BY [–û–±—â–∏–π –≤–µ—Å (—Ç)] DESC
        """
        return self.execute_query(query)
    
    def get_monthly_activity(self):
        """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥"""
        query = """
        SELECT 
            'EnterpriseWagons' as '–¢–∞–±–ª–∏—Ü–∞',
            YEAR([–î–∞—Ç–∞]) as '–ì–æ–¥',
            MONTH([–î–∞—Ç–∞]) as '–ú–µ—Å—è—Ü',
            COUNT(*) as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'
        FROM [EnterpriseWagons]
        WHERE [–î–∞—Ç–∞] >= DATEADD(year, -1, GETDATE())
        GROUP BY YEAR([–î–∞—Ç–∞]), MONTH([–î–∞—Ç–∞])
        
        UNION ALL
        
        SELECT 
            'ShipmentsToThePort' as '–¢–∞–±–ª–∏—Ü–∞',
            YEAR([–î–∞—Ç–∞]) as '–ì–æ–¥',
            MONTH([–î–∞—Ç–∞]) as '–ú–µ—Å—è—Ü',
            COUNT(*) as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'
        FROM [ShipmentsToThePort]
        WHERE [–î–∞—Ç–∞] >= DATEADD(year, -1, GETDATE())
        GROUP BY YEAR([–î–∞—Ç–∞]), MONTH([–î–∞—Ç–∞])
        
        UNION ALL
        
        SELECT 
            'VagonImport' as '–¢–∞–±–ª–∏—Ü–∞',
            YEAR([–î–∞—Ç–∞]) as '–ì–æ–¥',
            MONTH([–î–∞—Ç–∞]) as '–ú–µ—Å—è—Ü',
            COUNT(*) as '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'
        FROM [VagonImport]
        WHERE [–î–∞—Ç–∞] >= DATEADD(year, -1, GETDATE())
        GROUP BY YEAR([–î–∞—Ç–∞]), MONTH([–î–∞—Ç–∞])
        
        ORDER BY –ì–æ–¥, –ú–µ—Å—è—Ü
        """
        return self.execute_query(query)
    
    def create_dashboard_html(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–∞—à–±–æ—Ä–¥–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        if not self.connect():
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        table_stats = self.get_table_statistics()
        date_analysis = self.get_date_range_analysis()
        cargo_stats = self.get_cargo_statistics()
        monthly_activity = self.get_monthly_activity()
        
        html_content = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î OperativeReport</title>
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background-color: #f5f5f5;
                }}
                .container {{
                    max-width: 1200px;
                    margin: 0 auto;
                    background-color: white;
                    padding: 20px;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                h1, h2 {{
                    color: #333;
                    border-bottom: 2px solid #4CAF50;
                    padding-bottom: 10px;
                }}
                table {{
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                }}
                th, td {{
                    border: 1px solid #ddd;
                    padding: 12px;
                    text-align: left;
                }}
                th {{
                    background-color: #4CAF50;
                    color: white;
                }}
                tr:nth-child(even) {{
                    background-color: #f2f2f2;
                }}
                .stats-card {{
                    background-color: #e8f5e8;
                    padding: 15px;
                    margin: 10px 0;
                    border-radius: 5px;
                    border-left: 5px solid #4CAF50;
                }}
                .warning {{
                    background-color: #fff3cd;
                    border-left-color: #ffc107;
                }}
                .info {{
                    background-color: #d1ecf1;
                    border-left-color: #17a2b8;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üóÑÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î OperativeReport</h1>
                <div class="stats-card info">
                    <strong>–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                </div>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        if table_stats is not None and not table_stats.empty:
            total_records = table_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'].sum()
            total_size_mb = table_stats['–†–∞–∑–º–µ—Ä (MB)'].sum()
            
            html_content += f"""
                <div class="stats-card">
                    <h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <p><strong>–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü:</strong> {len(table_stats)}</p>
                    <p><strong>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</strong> {total_records:,}</p>
                    <p><strong>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</strong> {total_size_mb:.2f} MB</p>
                </div>
                
                <h2>üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º</h2>
                <table>
                    <tr>
                        <th>–¢–∞–±–ª–∏—Ü–∞</th>
                        <th>–ó–∞–ø–∏—Å–µ–π</th>
                        <th>–†–∞–∑–º–µ—Ä (MB)</th>
                        <th>–°—Ç–æ–ª–±—Ü–æ–≤</th>
                    </tr>
            """
            
            for _, row in table_stats.iterrows():
                html_content += f"""
                    <tr>
                        <td><strong>{row['–¢–∞–±–ª–∏—Ü–∞']}</strong></td>
                        <td>{row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π']:,}</td>
                        <td>{row['–†–∞–∑–º–µ—Ä (MB)']:.2f}</td>
                        <td>{row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤']}</td>
                    </tr>
                """
            html_content += "</table>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç
        if date_analysis is not None and not date_analysis.empty:
            html_content += """
                <h2>üìÖ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤</h2>
                <table>
                    <tr>
                        <th>–¢–∞–±–ª–∏—Ü–∞</th>
                        <th>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞</th>
                        <th>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞</th>
                        <th>–î–∏–∞–ø–∞–∑–æ–Ω (–¥–Ω–∏)</th>
                        <th>–ó–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–∞–º–∏</th>
                    </tr>
            """
            
            for _, row in date_analysis.iterrows():
                html_content += f"""
                    <tr>
                        <td><strong>{row['–¢–∞–±–ª–∏—Ü–∞']}</strong></td>
                        <td>{row['–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞']}</td>
                        <td>{row['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞']}</td>
                        <td>{row['–î–∏–∞–ø–∞–∑–æ–Ω (–¥–Ω–∏)']:,}</td>
                        <td>{row['–ó–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–∞–º–∏']:,}</td>
                    </tr>
                """
            html_content += "</table>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥—Ä—É–∑–∞–º
        if cargo_stats is not None and not cargo_stats.empty:
            html_content += """
                <h2>üì¶ –¢–æ–ø-20 —Ä–æ–¥–æ–≤ –≥—Ä—É–∑–∞ –ø–æ –≤–µ—Å—É</h2>
                <table>
                    <tr>
                        <th>–¢–∞–±–ª–∏—Ü–∞</th>
                        <th>–†–æ–¥ –≥—Ä—É–∑–∞</th>
                        <th>–ó–∞–ø–∏—Å–µ–π</th>
                        <th>–û–±—â–∏–π –≤–µ—Å (—Ç)</th>
                    </tr>
            """
            
            for _, row in cargo_stats.head(20).iterrows():
                weight = row['–û–±—â–∏–π –≤–µ—Å (—Ç)'] if pd.notna(row['–û–±—â–∏–π –≤–µ—Å (—Ç)']) else 0
                html_content += f"""
                    <tr>
                        <td><strong>{row['–¢–∞–±–ª–∏—Ü–∞']}</strong></td>
                        <td>{row['–†–æ–¥ –≥—Ä—É–∑–∞']}</td>
                        <td>{row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π']:,}</td>
                        <td>{weight:,.2f}</td>
                    </tr>
                """
            html_content += "</table>"
        
        html_content += """
            </div>
        </body>
        </html>
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        with open('/workspaces/aeroclub_repo/vagon/admin_dashboard.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print("üìä HTML –¥–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: admin_dashboard.html")
        self.disconnect()
        return html_content
    
    def print_full_statistics(self):
        """–í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if not self.connect():
            return
        
        print("=" * 80)
        print("üóÑÔ∏è  –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï –ë–î OperativeReport")
        print("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        print("\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ê–ë–õ–ò–¶–ê–ú:")
        print("-" * 80)
        table_stats = self.get_table_statistics()
        if table_stats is not None and not table_stats.empty:
            print(table_stats.to_string(index=False))
            
            total_records = table_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'].sum()
            total_size_mb = table_stats['–†–∞–∑–º–µ—Ä (MB)'].sum()
            print(f"\nüìä –ò–¢–û–ì–û: {len(table_stats)} —Ç–∞–±–ª–∏—Ü, {total_records:,} –∑–∞–ø–∏—Å–µ–π, {total_size_mb:.2f} MB")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç
        print("\nüìÖ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –î–ò–ê–ü–ê–ó–û–ù–û–í:")
        print("-" * 80)
        date_analysis = self.get_date_range_analysis()
        if date_analysis is not None and not date_analysis.empty:
            print(date_analysis.to_string(index=False))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–∑–∞–º
        print("\nüì¶ –¢–û–ü-15 –†–û–î–û–í –ì–†–£–ó–ê –ü–û –í–ï–°–£:")
        print("-" * 80)
        cargo_stats = self.get_cargo_statistics()
        if cargo_stats is not None and not cargo_stats.empty:
            print(cargo_stats.head(15).to_string(index=False))
        
        # –ú–µ—Å—è—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        print("\nüìà –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ú–ï–°–Ø–¶–ê–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥):")
        print("-" * 80)
        monthly_activity = self.get_monthly_activity()
        if monthly_activity is not None and not monthly_activity.empty:
            print(monthly_activity.to_string(index=False))
        
        self.disconnect()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
def main():
    admin = DatabaseAdmin()
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏")
    print("2. –°–æ–∑–¥–∞—Ç—å HTML –¥–∞—à–±–æ—Ä–¥")
    print("3. –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    if choice in ['1', '3']:
        admin.print_full_statistics()
    
    if choice in ['2', '3']:
        admin.create_dashboard_html()
        print("\nüåê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª admin_dashboard.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")

if __name__ == "__main__":
    main()
