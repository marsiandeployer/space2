"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π CLI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

import os
import sys
import argparse
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from src.backend.services.telegram_connector import TelegramConnector, TelegramMonitor
from src.backend.services.telegram_product_generator import TelegramProductGenerator
from src.backend.services.llm_service import LLMService
from dotenv import load_dotenv


def setup_logging(level=logging.INFO):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('telegram_monitor_advanced.log')
        ]
    )


def load_environment():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_path = Path(__file__).parent.parent.parent.parent / '.env'
    load_dotenv(env_path)
    
    required_vars = ['TELEGRAM_BOT_TOKEN', 'DEEPSEEK_API_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")


def create_services():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # LLM Service
    llm_service = LLMService(
        api_key=os.getenv('DEEPSEEK_API_KEY'),
        model=os.getenv('DEEPSEEK_MODEL', 'deepseek-chat'),
        base_url=os.getenv('DEEPSEEK_BASE_URL', 'https://api.deepseek.com')
    )
    
    # Telegram Connector
    connector = TelegramConnector(
        bot_token=os.getenv('TELEGRAM_BOT_TOKEN'),
        channel_username=os.getenv('TELEGRAM_CHANNEL', 'aideaxondemos')
    )
    
    # Product Generator
    generator = TelegramProductGenerator(llm_service=llm_service)
    
    return llm_service, connector, generator


def run_historical_processing(connector: TelegramConnector, generator: TelegramProductGenerator):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if not connector.test_connection():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        results = generator.process_all_historical_messages(connector)
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –°–û–û–ë–©–ï–ù–ò–ô ===")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {results['processed']}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {results['successful']}")
        logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: {results['skipped_duplicates']}")
        logger.info(f"–û—à–∏–±–æ–∫: {results['failed']}")
        
        if results['products']:
            logger.info("\nüì¶ –°–û–ó–î–ê–ù–ù–´–ï –ü–†–û–î–£–ö–¢–´:")
            for product in results['products']:
                logger.info(f"  ‚úÖ {product['product_id']}: {product['product_name']} (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {product['message_id']})")
        
        if results['duplicates']:
            logger.info("\nüîÑ –ü–†–û–ü–£–©–ï–ù–ù–´–ï –î–£–ë–õ–ò:")
            for duplicate in results['duplicates']:
                logger.info(f"  ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ {duplicate['message_id']}: –¥—É–±–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞ {duplicate['duplicate_of']}")
        
        if results['errors']:
            logger.warning("\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in results['errors']:
                if 'message_id' in error:
                    logger.warning(f"  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {error['message_id']}: {error['error']}")
                else:
                    logger.warning(f"  ‚ùå {error['error']}")
        
        logger.info(f"\nüéØ –ò–¢–û–ì: –°–æ–∑–¥–∞–Ω–æ {results['successful']} –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ {results['skipped_duplicates']} –¥—É–±–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
        logger.info("\nüìã –í–°–ï –ü–†–û–î–£–ö–¢–´ –í –°–ò–°–¢–ï–ú–ï:")
        all_products = generator._get_existing_products_with_data()
        for product_id, product_data in all_products.items():
            logger.info(f"  üìÑ {product_id}: {product_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


def run_batch_generation(connector: TelegramConnector, generator: TelegramProductGenerator, limit: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ {limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if not connector.test_connection():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API")
            return
        
        messages = connector.fetch_recent_messages(limit=limit)
        if not messages:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        suitable_messages = []
        for msg in messages:
            if generator._is_suitable_for_product_generation(msg):
                suitable_messages.append(msg)
                logger.info(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id}: –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            else:
                logger.info(f"  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id}: –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        logger.info(f"–ò–∑ –Ω–∏—Ö –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(suitable_messages)}")
        
        if suitable_messages:
            results = generator.process_batch_messages(suitable_messages)
            
            logger.info("=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ù–ï–†–ê–¶–ò–ò ===")
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['processed']}")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ: {results['successful']}")
            logger.info(f"–û—à–∏–±–æ–∫: {results['failed']}")
            
            if results['products']:
                logger.info("–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:")
                for product in results['products']:
                    logger.info(f"  ‚úÖ {product['product_id']}: {product['product_name']}")
        else:
            logger.info("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


def run_monitoring(connector: TelegramConnector, generator: TelegramProductGenerator, interval: int):
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger = logging.getLogger(__name__)
    
    try:
        monitor = TelegramMonitor(connector, generator, check_interval=interval)
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")
        logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        monitor.start_monitoring()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


def check_duplicates(generator: TelegramProductGenerator):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
    logger = logging.getLogger(__name__)
    
    try:
        logger.info("üîç –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–†–û–î–£–ö–¢–û–í")
        
        all_products = generator._get_existing_products_with_data()
        
        if not all_products:
            logger.info("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
        
        for product_id, product_data in all_products.items():
            name = product_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            description = product_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
            category = product_data.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            
            logger.info(f"\nüìÑ {product_id}")
            logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
            logger.info(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–µ–π
            keywords = product_data.get('seo', {}).get('keywords', [])
            if keywords:
                logger.info(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords[:3])}...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
    parser.add_argument('--mode', choices=['monitor', 'generate', 'historical', 'check'], 
                       default='monitor', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--limit', type=int, default=10, 
                       help='–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--channel', default='aideaxondemos', 
                       help='Username Telegram –∫–∞–Ω–∞–ª–∞')
    parser.add_argument('--interval', type=int, default=300,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--debug', action='store_true',
                       help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.DEBUG if args.debug else logging.INFO
    setup_logging(log_level)
    
    logger = logging.getLogger(__name__)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        load_environment()
        logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        llm_service, connector, generator = create_services()
        connector.channel_username = args.channel
        
        if args.mode == 'monitor':
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ @{args.channel}")
            run_monitoring(connector, generator, args.interval)
            
        elif args.mode == 'generate':
            logger.info(f"‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ {args.limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            run_batch_generation(connector, generator, args.limit)
            
        elif args.mode == 'historical':
            logger.info(f"üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @{args.channel}")
            run_historical_processing(connector, generator)
            
        elif args.mode == 'check':
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            check_duplicates(generator)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
