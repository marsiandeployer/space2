#!/usr/bin/env python3
"""
CLI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SEO-—Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

import os
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.backend.services.seo_service import SeoService
from src.backend.services.llm_service import LLMService
from src.backend.services.parsing_service import ParsingService
from src.backend.services.cache_service import CacheService
from src.backend.services.products import product_registry
from src.backend.services.products.contract_analysis import ContractAnalysisProduct
from src.backend.services.products.news_analysis import NewsAnalysisProduct

def initialize_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    llm_service = LLMService(
        deepseek_api_key=os.getenv('DEEPSEEK_API_KEY'),
        openai_api_key=os.getenv('OPENAI_API_KEY')
    )
    parsing_service = ParsingService(llm_service=llm_service)
    cache_service = CacheService()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    contract_product = ContractAnalysisProduct(llm_service, parsing_service, cache_service)
    news_product = NewsAnalysisProduct(llm_service)
    
    product_registry.register_product(contract_product)
    product_registry.register_product(news_product)
    
    # –°–æ–∑–¥–∞–µ–º SEO-—Å–µ—Ä–≤–∏—Å
    content_base_path = os.path.join(os.getcwd(), 'content', 'seo_pages')
    seo_service = SeoService(
        llm_service=llm_service,
        parsing_service=parsing_service,
        content_base_path=content_base_path
    )
    
    return seo_service

def create_page_with_product(seo_service, slug, title, keywords, product_id, meta_description=""):
    """–°–æ–∑–¥–∞–µ—Ç SEO-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        success = seo_service.create_seo_page_with_product(
            slug=slug,
            title=title,
            keywords=keywords,
            product_id=product_id,
            meta_description=meta_description
        )
        
        if success:
            print(f"‚úÖ SEO-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ '{slug}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{product_id}'")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")
            print(f"   URL: /{slug}")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SEO-—Å—Ç—Ä–∞–Ω–∏—Ü—É '{slug}'")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False

def list_products():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    products = product_registry.get_all_products()
    
    print("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:")
    print("-" * 50)
    
    for product_id, product in products.items():
        product_info = product.get_product_info()
        print(f"ID: {product_id}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}")
        print(f"–î–µ–º–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {'–î–∞' if product_info.get('demo_available') else '–ù–µ—Ç'}")
        print("-" * 50)

def generate_slug(title):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    import re
    import unicodedata
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    slug = title.lower()
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    slug = re.sub(r'[^\w\s-]', '', slug, flags=re.UNICODE)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
    slug = re.sub(r'[-\s]+', '-', slug)
    
    # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    slug = slug.strip('-')
    
    return slug

def main():
    parser = argparse.ArgumentParser(description="–°–æ–∑–¥–∞–Ω–∏–µ SEO-—Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    create_parser = subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å SEO-—Å—Ç—Ä–∞–Ω–∏—Ü—É')
    create_parser.add_argument('--title', required=True, help='–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    create_parser.add_argument('--keywords', required=True, help='–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
    create_parser.add_argument('--product', required=True, help='ID –ø—Ä–æ–¥—É–∫—Ç–∞')
    create_parser.add_argument('--slug', help='Slug —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)')
    create_parser.add_argument('--description', help='Meta description')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    list_parser = subparsers.add_parser('products', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    bulk_parser = subparsers.add_parser('bulk', help='–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü')
    bulk_parser.add_argument('--file', required=True, help='–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (CSV)')
    bulk_parser.add_argument('--product', required=True, help='ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    seo_service = initialize_services()
    
    if args.command == 'products':
        list_products()
        
    elif args.command == 'create':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        product = product_registry.get_product(args.product)
        if not product:
            print(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{args.product}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:")
            list_products()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        slug = args.slug or generate_slug(args.title)
        
        # –ü–∞—Ä—Å–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = [kw.strip() for kw in args.keywords.split(',')]
        
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ SEO-—Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        print(f"   Slug: {slug}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {args.title}")
        print(f"   –ü—Ä–æ–¥—É–∫—Ç: {args.product}")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")
        
        success = create_page_with_product(
            seo_service=seo_service,
            slug=slug,
            title=args.title,
            keywords=keywords,
            product_id=args.product,
            meta_description=args.description or ""
        )
        
        if success:
            print(f"\nüéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://localhost/{slug}")
        
    elif args.command == 'bulk':
        print(f"üìÑ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞: {args.file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        product = product_registry.get_product(args.product)
        if not product:
            print(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç '{args.product}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            import csv
            with open(args.file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                
                created_count = 0
                failed_count = 0
                
                for row in reader:
                    title = row.get('title', '').strip()
                    keywords_str = row.get('keywords', '').strip()
                    slug = row.get('slug', '').strip() or generate_slug(title)
                    description = row.get('description', '').strip()
                    
                    if not title or not keywords_str:
                        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç title –∏–ª–∏ keywords")
                        failed_count += 1
                        continue
                    
                    keywords = [kw.strip() for kw in keywords_str.split(',')]
                    
                    success = create_page_with_product(
                        seo_service=seo_service,
                        slug=slug,
                        title=title,  
                        keywords=keywords,
                        product_id=args.product,
                        meta_description=description
                    )
                    
                    if success:
                        created_count += 1
                    else:
                        failed_count += 1
                
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(f"   –°–æ–∑–¥–∞–Ω–æ: {created_count}")
                print(f"   –û—à–∏–±–æ–∫: {failed_count}")
                
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {args.file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    main()
